# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'report_screen.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, uic
from btn1_widget import Ui_btn1_widget
from btn2_widget import Ui_btn2_widget
from btn3_widget import Ui_btn3_widget
import openpyxl
import datetime
import calendar

report_class = uic.loadUiType("report_screen.ui")[0]


class report_screen(QtWidgets.QDialog, report_class):
    def initialize_screen(self, id_in):
        self.get_info(id_in)
        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.sec_changed)
        self.btn1.clicked.connect(self.btn1_click)
        self.btn2.clicked.connect(self.btn2_click)
        self.btn3.clicked.connect(self.btn3_click)
        self.button_calendar_1.clicked.connect(self.button_calendar_1_click)
        self.button_calendar_2.clicked.connect(self.button_calendar_2_click)
        self.button_calendar_3.clicked.connect(self.button_calendar_3_click)
        self.button_calendar_4.clicked.connect(self.button_calendar_4_click)
        self.button_calendar_5.clicked.connect(self.button_calendar_5_click)
        self.month_increase.pressed.connect(self.increase_calendar)
        self.month_decrease.pressed.connect(self.decrease_calendar)
        self.month_increase.released.connect(self.increase_calendar_release)
        self.month_decrease.released.connect(self.decrease_calendar_release)

        self.btn1_widget = Ui_btn1_widget()
        self.btn1_widget.setupUi(self.btn1_widget)
        self.btn1_widget.setParent(self.widget1)

        self.btn2_widget = Ui_btn2_widget()
        self.btn2_widget.setupUi(self.btn2_widget)
        self.btn2_widget.setParent(self.widget2)

        self.btn3_widget = Ui_btn3_widget()
        self.btn3_widget.setupUi(self.btn3_widget)
        self.btn3_widget.setParent(self.widget3)

        self.btn1_click()
        self.set_time()
        self.init_calendar()
        self.set_living_score()
        self.btn2_widget.init(str(self.ID_num), self.cur_month)
        self.btn3_widget.init(str(self.ID_num), self.cur_month)

    def sec_changed(self):
        self.set_time()

    def btn1_click(self):  # 생활규칙성
        self.indicator1.show()
        self.indicator2.hide()
        self.indicator3.hide()
        self.widget1.show()
        self.widget2.hide()
        self.widget3.hide()

    def btn2_click(self):  # 순이 대화
        self.indicator1.hide()
        self.indicator2.show()
        self.indicator3.hide()
        self.widget1.hide()
        self.widget2.show()
        self.widget3.hide()

    def btn3_click(self):  #  사용자의 감정 유추
        self.indicator1.hide()
        self.indicator2.hide()
        self.indicator3.show()
        self.widget1.hide()
        self.widget2.hide()
        self.widget3.show()

    def button_calendar_1_click(self):
        self.calendar_indicator.move(20, 436)
        self.choose_week(0)

    def button_calendar_2_click(self):
        self.calendar_indicator.move(20, 462)
        self.choose_week(1)

    def button_calendar_3_click(self):
        self.calendar_indicator.move(20, 488)
        self.choose_week(2)

    def button_calendar_4_click(self):
        self.calendar_indicator.move(20, 514)
        self.choose_week(3)

    def button_calendar_5_click(self):
        self.calendar_indicator.move(20, 539)
        self.choose_week(4)

    def init_calendar(self):
        cur_time = datetime.datetime.now()
        self.cur_year = 2021
        self.cur_month = 8
        self.set_calendar()
        self.button_calendar_1_click()

    def increase_calendar(self):
        self.month_increase.setCursor(QtCore.Qt.ClosedHandCursor)
        self.cur_month += 1
        if self.cur_month == 13:
            self.cur_month = 1
            self.cur_year += 1
        self.set_calendar()
        self.button_calendar_1_click()

    def decrease_calendar(self):
        self.month_decrease.setCursor(QtCore.Qt.ClosedHandCursor)
        self.cur_month -= 1
        if self.cur_month == 0:
            self.cur_month = 12
            self.cur_year -= 1
        self.set_calendar()
        self.button_calendar_1_click()

    def increase_calendar_release(self):
        self.month_increase.setCursor(QtCore.Qt.OpenHandCursor)

    def decrease_calendar_release(self):
        self.month_decrease.setCursor(QtCore.Qt.OpenHandCursor)

    def get_info(self, id_in):
        wb = openpyxl.load_workbook(filename="./data/user_profile.xlsx")
        self.ID_num = wb["user_profile"]["A" + str(id_in)].value
        self.is_male = wb["user_profile"]["B" + str(id_in)].value == "M"
        self.age_num = wb["user_profile"]["C" + str(id_in)].value
        self.ID.setText("ID : " + str(self.ID_num))
        if self.is_male:
            self.sex.setText("성별 : 남성")
        else:
            self.sex.setText("성별 : 여성")
        self.age.setText("나이 : " + str(self.age_num))

    def set_calendar(self):
        self.month.setText(str(self.cur_year) + "년 " + str(self.cur_month) + "월")
        self.calendar_list = calendar.Calendar(firstweekday=6).monthdatescalendar(
            self.cur_year, self.cur_month
        )
        self.button_calendar_1.setText(self.week_list_to_text(self.calendar_list[0]))
        self.button_calendar_2.setText(self.week_list_to_text(self.calendar_list[1]))
        self.button_calendar_3.setText(self.week_list_to_text(self.calendar_list[2]))
        self.button_calendar_4.setText(self.week_list_to_text(self.calendar_list[3]))
        if len(self.calendar_list) > 4:
            self.button_calendar_5.show()
            self.button_calendar_5.setText(
                self.week_list_to_text(self.calendar_list[4])
            )
        else:
            self.button_calendar_5.hide()

    def week_list_to_text(self, week_list):
        out = "  "
        for day in week_list:
            if day.month != self.cur_month:
                out += "    "
            else:
                out += "{0: >2d}  ".format(day.day)
        return out

    def choose_week(self, index):
        # self.calendar_list[index]
        self.btn1_widget.set_eating_table(self.calendar_list[index], str(self.ID_num))
        self.btn1_widget.change_week(self.calendar_list[index], str(self.ID_num))
        self.btn2_widget.init(str(self.ID_num), self.cur_month)

    def set_time(self):
        cur_time = datetime.datetime.now()
        cur_date = cur_time.strftime("%Y년 %m월 %d일")
        cur_hour = ("오전" if (cur_time.hour < 12) else "오후") + cur_time.strftime(
            " %I시 %M분"
        )
        self.date.setText(cur_date)
        self.time.setText(cur_hour)
        self.timer.start((60 - cur_time.second) * 1000)

    def set_living_score(self):
        self.btn1_widget.set_living_score(str(self.ID_num))


import resources_rc


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = report_screen()
    ui.setupUi(Dialog)
    ui.initialize_screen(2)
    Dialog.show()
    sys.exit(app.exec_())
